[
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "numbers_checker",
        "description": "numbers_checker",
        "isExtraImport": true,
        "detail": "numbers_checker",
        "documentation": {}
    },
    {
        "label": "NumbersStep",
        "kind": 6,
        "importPath": "numbers_checker",
        "description": "numbers_checker",
        "peekOfCode": "class NumbersStep:\n    m: int\n    n: int\n    def next(self) -> int:\n        return self.m ** 2 + self.n ** 2 + 1\n@dataclass\nclass NumbersPath:\n    a: int\n    b: int\n    steps: tp.Tuple[",
        "detail": "numbers_checker",
        "documentation": {}
    },
    {
        "label": "NumbersPath",
        "kind": 6,
        "importPath": "numbers_checker",
        "description": "numbers_checker",
        "peekOfCode": "class NumbersPath:\n    a: int\n    b: int\n    steps: tp.Tuple[\n        tp.List[NumbersStep], # steps for a\n        tp.List[NumbersStep] # steps for b\n    ]\n    @staticmethod\n    def sum(m: int, n: int) -> int:\n        return m + n",
        "detail": "numbers_checker",
        "documentation": {}
    },
    {
        "label": "Checker",
        "kind": 6,
        "importPath": "numbers_checker",
        "description": "numbers_checker",
        "peekOfCode": "class Checker:\n    def __init__(self, max_n: int) -> None:\n        \"\"\"\n        Class to check hypothesis\n        Args:\n            max_n (int): N from the task description\n        \"\"\"\n        self.N = max_n\n    def run_check(self) -> None:\n        pass",
        "detail": "numbers_checker",
        "documentation": {}
    },
    {
        "label": "test_23",
        "kind": 2,
        "importPath": "numbers_checker_test",
        "description": "numbers_checker_test",
        "peekOfCode": "def test_23():\n    a = 2\n    b = 3\n    checker = Checker(3)\n    checker.run_check()\n    correct_path = NumbersPath(\n        a, b,\n        (\n           [NumbersStep(1, 1)],\n           []",
        "detail": "numbers_checker_test",
        "documentation": {}
    },
    {
        "label": "test_correct_path",
        "kind": 2,
        "importPath": "numbers_checker_test",
        "description": "numbers_checker_test",
        "peekOfCode": "def test_correct_path(N: int):\n    checker = Checker(N)\n    checker.run_check()\n    for a in range(1, N + 1):\n        for b in range(a + 1, N + 1):\n            path = checker.get_path(a, b) \n            assert path.a == a\n            assert path.b == b\n            cur_a, cur_b = a, b\n            for numbers_step in path.steps[0]: # check a",
        "detail": "numbers_checker_test",
        "documentation": {}
    }
]